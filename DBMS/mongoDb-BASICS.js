// MongoDB Lab - ADBMS
// Introduction:
// â€¢ MongoDB is a NoSQL database that stores data in JSON-like documents (called BSON).
// â€¢ It is schema-less, which means each document can have a different structure.
// â€¢ It is used for handling large volumes of unstructured data.
// â€¢ Collections in MongoDB are like tables in SQL.
// â€¢ Documents in MongoDB are like rows in SQL, but more flexible.
// â€¢ It uses JavaScript-like syntax to query and manipulate data.

// MongoDB Basic Commands - ADBMS Lab

What is db?  -> It is a built-in variable in MongoDB shell. Always points to the current database selected using use.

| Data Type               | Example                                         | Description                         |
| ----------------------- | ----------------------------------------------- | ----------------------------------- |
| **String**              | `"name": "John"`                                | Text values                         |
| **Number (Int/Double)** | `"age": 25`                                     | Whole or decimal numbers            |
| **Boolean**             | `"isActive": true`                              | `true` or `false`                   |
| **Array**               | `"hobbies": ["reading", "sports"]`              | List of values                      |
| **Object**              | `"address": { "city": "Delhi", "zip": 123456 }` | Nested document                     |
| **Date**                | `"createdAt": new Date()`                       | Date and time value                 |
| **Null**                | `"middleName": null`                            | Represents missing or unknown value |
| **ObjectId**            | `"_id": ObjectId("...")`                        | Unique ID for every document        |


//âœ… Difference Between {} and [] in MongoDB

| Symbol | Name                | Used For                   | Example                     |
| ------ | ------------------- | -------------------------- | --------------------------- |
| `{}`   | **Curly Braces**    | **Object / Document**      | `{ name: "John", age: 25 }` |
| `[]`   | **Square Brackets** | **Array / List of values** | `[ "reading", "cricket" ]`  |


// ===== MongoDB ADBMS Lab Commands =====

// ðŸ”¹ Show all databases
show dbs

// ðŸ”¹ Create or switch to a database
use myDatabase

// ðŸ”¹ Show current database
db

// ðŸ”¹ Create a new collection
db.createCollection("users")

// ðŸ”¹ Insert one document into users collection
db.users.insertOne({
  name: "John",
  age: 25,
  isActive: true,
  hobbies: ["reading", "cricket"],
  address: { city: "Delhi", zip: 110001 },
  createdAt: new Date(),
  middleName: null
})

// ðŸ”¹ Insert multiple documents
db.users.insertMany([
  { name: "Amit", age: 30, isActive: false },
  { name: "Sara", age: 22, isActive: true }
])

// ðŸ”¹ Find all documents in the collection
db.users.find()

// ðŸ”¹ Find with condition
db.users.find({ age: 25 })

// ðŸ”¹ Find and display output in readable format
db.users.find().pretty()

// ðŸ”¹ Find only one document (first match)
db.users.findOne({ isActive: true })

// ðŸ”¹ Drop the entire collection
db.users.drop()

// ðŸ”¹ Drop the current database
db.dropDatabase()

// ===== MongoDB Data Types Used in Example =====
// â€¢ String: "John"
// â€¢ Number: 25
// â€¢ Boolean: true / false
// â€¢ Array: ["reading", "cricket"]
// â€¢ Object: { city: "Delhi", zip: 110001 }
// â€¢ Date: new Date()
// â€¢ Null: null
// â€¢ ObjectId: Automatically generated by MongoDB for _id field

// ðŸ”¹ Sort by name in ascending order (A to Z)
db.users.find().sort({ name: 1 })

// ðŸ”¹ Sort by multiple fields: first by age descending, then name ascending
db.users.find().sort({ age: -1, name: 1 })

// ðŸ”¹ Use limit() with sort - Get the youngest person
db.users.find().sort({ age: 1 }).limit(1)

// ðŸ”¹ Use limit() with sort - Get the oldest person
db.users.find().sort({ age: -1 }).limit(1)



